{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "lib/index.js",
    "lib/utils/client.js"
  ],
  "names": [],
  "mappings
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "// Generated by CoffeeScript 1.8.0\nvar checkError, client, define, errorMaker;\n\nclient = require('./utils/client');\n\ncheckError = function(error, response, body, code, callback) {\n  return callback(errorMaker(error, response, body, code));\n};\n\nerrorMaker = function(error, response, body, expectedCode) {\n  var err, msgStatus;\n  if (error) {\n    return error;\n  } else if (response.status !== expectedCode) {\n    msgStatus = \"expected: \" + expectedCode + \", got: \" + response.statusCode;\n    err = new Error(\"\" + msgStatus + \" -- \" + body.error + \" -- \" + body.reason);\n    err.status = response.statusCode;\n    return err;\n  } else {\n    return null;\n  }\n};\n\ndefine = function(docType, name, request, callback) {\n  var map, path, reduce, reduceArgsAndBody, view;\n  map = request.map, reduce = request.reduce;\n  if ((reduce != null) && typeof reduce === 'function') {\n    reduce = reduce.toString();\n    reduceArgsAndBody = reduce.slice(reduce.indexOf('('));\n    reduce = \"function \" + reduceArgsAndBody;\n  }\n  view = {\n    reduce: reduce,\n    map: \"function (doc) {\\n  if (doc.docType.toLowerCase() === \\\"\" + (docType.toLowerCase()) + \"\\\") {\\n    filter = \" + (map.toString()) + \";\\n    filter(doc);\\n  }\\n}\"\n  };\n  path = \"request/\" + docType + \"/\" + (name.toLowerCase()) + \"/\";\n  return client.put(path, view, function(error, body, response) {\n    return checkError(error, response, body, 200, callback);\n  });\n};\n\nmodule.exports.create = function(docType, attributes, callback) {\n  var path;\n  path = \"data/\";\n  attributes.docType = docType;\n  if (attributes.id != null) {\n    path += \"\" + attributes.id + \"/\";\n    delete attributes.id;\n    return callback(new Error('cant create an object with a set id'));\n  }\n  return client.post(path, attributes, function(error, body, response) {\n    if (error) {\n      return callback(error);\n    } else {\n      return callback(null, JSON.parse(body));\n    }\n  });\n};\n\nmodule.exports.find = function(id, callback) {\n  return client.get(\"data/\" + id + \"/\", null, function(error, body, response) {\n    if (error) {\n      return callback(error);\n    } else if (response.status === 404) {\n      return callback(null, null, null);\n    } else {\n      return callback(null, body);\n    }\n  });\n};\n\nmodule.exports.exists = function(id, callback) {\n  return client.get(\"data/exist/\" + id + \"/\", null, function(error, body, response) {\n    if (error) {\n      return callback(error);\n    } else if ((body == null) || (body.exist == null)) {\n      return callback(new Error(\"Data system returned invalid data.\"));\n    } else {\n      return callback(null, body.exist);\n    }\n  });\n};\n\nmodule.exports.updateAttributes = function(docType, id, attributes, callback) {\n  console.log('updateAttributes');\n  attributes.docType = docType;\n  return client.put(\"data/merge/\" + id + \"/\", attributes, function(error, body, response) {\n    if (error) {\n      return callback(error);\n    } else if (response.status === 404) {\n      return callback(new Error(\"Document \" + id + \" not found\"));\n    } else if (response.status !== 200) {\n      return callback(new Error(\"Server error occured.\"));\n    } else {\n      return callback(null, JSON.parse(body));\n    }\n  });\n};\n\nmodule.exports.destroy = function(id, callback) {\n  return client.del(\"data/\" + id + \"/\", null, function(error, body, response) {\n    if (error) {\n      return callback(error);\n    } else if (response.status === 404) {\n      return callback(new Error(\"Document \" + id + \" not found\"));\n    } else if (response.status !== 204) {\n      return callback(new Error(\"Server error occured.\"));\n    } else {\n      return callback(null);\n    }\n  });\n};\n\nmodule.exports.defineRequest = function(docType, name, request, callback) {\n  var map, reduce;\n  if (typeof request === \"function\" || typeof request === 'string') {\n    map = request;\n  } else {\n    map = request.map;\n    reduce = request.reduce;\n  }\n  return define(docType, name, {\n    map: map,\n    reduce: reduce\n  }, callback);\n};\n\nmodule.exports.run = function(docType, name, params, callback) {\n  var path, _ref;\n  if (typeof params === \"function\") {\n    _ref = [{}, params], params = _ref[0], callback = _ref[1];\n  }\n  path = \"request/\" + docType + \"/\" + (name.toLowerCase()) + \"/\";\n  return client.post(path, params, function(error, body, response) {\n    if (error) {\n      return callback(error);\n    } else if (response.status !== 200) {\n      return callback(new Error(util.inspect(body)));\n    } else {\n      return callback(null, body);\n    }\n  });\n};\n\nmodule.exports.requestDestroy = function(docType, name, params, callback) {\n  var path, _ref;\n  if (typeof params === \"function\") {\n    _ref = [{}, params], params = _ref[0], callback = _ref[1];\n  }\n  if (params.limit == null) {\n    params.limit = 100;\n  }\n  path = \"request/\" + docType + \"/\" + (name.toLowerCase()) + \"/destroy/\";\n  return client.put(path, params, function(error, body, response) {\n    return checkError(error, response, body, 204, callback);\n  });\n};\n",
    "// Generated by CoffeeScript 1.8.0\nvar askForToken, playRequest;\n\naskForToken = function() {\n  return window.parent.postMessage({\n    action: 'getToken'\n  }, '*');\n};\n\nmodule.exports = {\n  get: function(path, attributes, callback) {\n    return playRequest('GET', path, attributes, function(error, body, response) {\n      return callback(error, body, response);\n    });\n  },\n  post: function(path, attributes, callback) {\n    return playRequest('POST', path, attributes, function(error, body, response) {\n      return callback(error, body, response);\n    });\n  },\n  put: function(path, attributes, callback) {\n    console.log('put');\n    return playRequest('PUT', path, attributes, function(error, body, response) {\n      return callback(error, body, response);\n    });\n  },\n  del: function(path, attributes, callback) {\n    return playRequest('DELETE', path, attributes, function(error, body, response) {\n      return callback(error, body, response);\n    });\n  }\n};\n\nplayRequest = function(method, path, attributes, callback) {\n  var receiveToken, sendRequest;\n  askForToken();\n  receiveToken = function(event) {\n    var auth;\n    window.removeEventListener('message', receiveToken);\n    auth = event.data;\n    return sendRequest(auth, function(error, body, response) {\n      return callback(error, body, response);\n    });\n  };\n  sendRequest = function(auth, callback) {\n    var xhr;\n    xhr = new XMLHttpRequest;\n    xhr.open(method, \"/ds-api/\" + path, true);\n    xhr.onload = function() {\n      return callback(null, xhr.response, xhr);\n    };\n    xhr.onerror = function(e) {\n      var err;\n      err = 'Request failed : #{e.target.status}';\n      return callback(err);\n    };\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.setRequestHeader('Authorization', 'Basic ' + btoa(auth.appName + ':' + auth.token));\n    if (attributes != null) {\n      xhr.send(JSON.stringify(attributes));\n    } else {\n      xhr.send();\n    }\n  };\n  return window.addEventListener('message', receiveToken, false);\n};\n"
  ]
}